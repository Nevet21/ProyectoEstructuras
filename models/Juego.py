import threading, time
from models.Carro import Carro
from models.Carretera import Carretera
from models.Obstaculo import Obstaculo
from models.ArbolAVL import ArbolAVL


class JuegoModel:
    def __init__(self, longitud, energia_inicial, velocidad, intervalo):
        self.carro = Carro()
        self.carretera = Carretera(longitud)
        self.energia = energia_inicial
        self.terminado = False

        # √Årbol AVL para obst√°culos
        self.arbol_obstaculos = ArbolAVL()
        self.obstaculos_visibles = []  # Obst√°culos en pantalla

        # Configuraci√≥n del loop
        self.velocidad = velocidad
        self.intervalo = intervalo
        self.en_ejecucion = True

    def agregar_obstaculo(self, x, carril, tipo="normal", dano=10):
        obstaculo = Obstaculo(x, carril, tipo, dano)
        self.carretera.agregar_obstaculo(obstaculo)

        # Insertar en el √°rbol AVL tambi√©n
        self.arbol_obstaculos.insertar(x, carril, tipo, dano, obstaculo)

    def actualizar_obstaculos_visibles(self, x_min, x_max):
        """Consulta el AVL para obtener obst√°culos en el rango visible"""
        self.obstaculos_visibles = self.arbol_obstaculos.obtener_en_rango(
            x_min, x_max, 0, 3  # y entre carriles 0-3
        )

    def verificar_colisiones(self):
        # Solo verificar con obst√°culos visibles (m√°s eficiente)
        for obst in self.obstaculos_visibles:
            if obst.colisiona_con(self.carro):
                self.energia -= obst.dano
                print(f"üí• Choque con {obst.tipo}! Energ√≠a: {self.energia}%")
                if self.energia <= 0:
                    self.terminado = True
                    print("‚ùå Juego terminado: sin energ√≠a.")

    def update(self, screen_width=800):
        """Un ciclo de actualizaci√≥n del juego"""
        if not self.en_ejecucion or self.terminado:
            return

        self.carro.actualizar_salto()

        # Mover todos los obst√°culos
        for obst in self.carretera.obstaculos:
            obst.mover(self.velocidad)

        # Actualizar visibles
        x_min = self.carro.x - 100
        x_max = self.carro.x + screen_width
        self.actualizar_obstaculos_visibles(x_min, x_max)

        # Verificar colisiones
        self.verificar_colisiones()

        # Debug info
        estado_salto = f"(saltando, altura={self.carro.altura})" if self.carro.esta_saltando else ""
        print(f"üöó Carro carril={self.carro.carril} {estado_salto}, energ√≠a={self.energia}%")


class GameThread(threading.Thread):
    """Thread que ejecuta la l√≥gica del juego"""
    def __init__(self, juego, screen_width=800):
        super().__init__()
        self.juego = juego
        self.screen_width = screen_width

    def run(self):
        while not self.juego.terminado and self.juego.en_ejecucion:
            self.juego.update(self.screen_width)
            time.sleep(self.juego.intervalo)


class TreeVisualizerThread(threading.Thread):
    """Thread que dibuja/visualiza el √°rbol AVL"""
    def __init__(self, juego):
        super().__init__()
        self.juego = juego

    def run(self):
        while not self.juego.terminado and self.juego.en_ejecucion:
            # Aqu√≠ podr√≠as usar pygame, tkinter, o solo print()
            print("üå≥ Estado actual del √°rbol AVL:")
            self.juego.arbol_obstaculos.imprimir()  # ‚Üê debes tener un m√©todo imprimir en tu AVL
            time.sleep(2)  # refresca cada 2 seg
