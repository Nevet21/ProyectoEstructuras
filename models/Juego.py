import random
import threading, time
from models.GenerarJSON import GenerarJSON
from models.Carro import Carro
from models.Carretera import Carretera
from models.Obstaculo import Obstaculo
from models.ArbolAVL import ArbolAVL

class JuegoModel:
    def __init__(self, longitud, energia_inicial, velocidad, intervalo, config_json):
        self.carro = Carro()
        self.carretera = Carretera(longitud)
        self.energia = energia_inicial
        self.energia_maxima = energia_inicial
        self.terminado = False

        # √Årbol AVL para obst√°culos
        self.arbol_obstaculos = ArbolAVL()
        self.obstaculos_visibles = []

        # Configuraci√≥n del loop
        self.velocidad = velocidad
        self.intervalo = intervalo
        self.en_ejecucion = True

        self.generador_json = GenerarJSON(config_json.get("configuraciones", {}))
        self.ultima_generacion_x = 100
        self.intervalo_generacion = 150
        self.probabilidad_obstaculo = 0.8
        
        self.ultima_generacion_x = 300  # Empezar despu√©s de los obst√°culos iniciales
        self.intervalo_generacion = 200  # Distancia entre generaciones
        
        # Generar obst√°culos iniciales
        obstaculos_config = config_json.get("obstaculos", [])
        self.generar_obstaculos_iniciales(obstaculos_config)

    def generar_obstaculos_iniciales(self, obstaculos_config):
        """Genera obst√°culos iniciales desde JSON y algunos extra"""
        # Obst√°culos del JSON
        for obst_data in obstaculos_config:
            try:
                x = obst_data.get("x", 0)
                carril = obst_data.get("carril", 0)
                tipo = obst_data.get("tipo", "cono")
                self.agregar_obstaculo(x, carril, tipo)
            except Exception as e:
                print(f"‚ùå Error cargando obst√°culo del JSON: {e}")
        
        # ‚úÖ Generar obst√°culos adicionales si hay pocos
        if len(self.carretera.obstaculos) < 3:
            for i in range(3):
                x = 300 + (i * 200)
                carril = random.randint(0, 2)
                tipo = random.choice(["cono", "roca", "aceite", "hueco"])
                self.agregar_obstaculo(x, carril, tipo)

    def generar_obstaculos_dinamicos(self):
        """Genera obst√°culos din√°micamente con distribuci√≥n inteligente"""
        if self.carro.x <= self.ultima_generacion_x:
            return  # Esperar a que el carro avance m√°s
            
        x_min = self.carro.x + 400  # M√°s distancia para reaccionar
        x_max = x_min + 600  # Rango m√°s amplio
        
        print(f"üéØ GENERANDO entre X={x_min} y X={x_max}")
        
        # ‚úÖ DISTRIBUCI√ìN INTELIGENTE - m√°ximo 2 obst√°culos por grupo
        num_obstaculos = random.randint(1, 3)  # Reducir cantidad
        obstaculos_generados = 0
        
        # ‚úÖ EVITAR MUCHOS OBST√ÅCULOS EN LA MISMA ZONA
        carriles_disponibles = [0, 1, 2]
        random.shuffle(carriles_disponibles)  # Mezclar carriles
        
        for i in range(min(num_obstaculos, 3)):  # M√°ximo 3 obst√°culos
            if not carriles_disponibles:
                break
                
            carril = carriles_disponibles.pop()  # Tomar carril disponible
            tipo = random.choice(["cono", "roca", "aceite", "hueco"])
            
            # ‚úÖ DISTRIBUIR EN X - no todos en la misma posici√≥n
            if i == 0:
                x_pos = random.randint(x_min, x_min + 200)  # Primer obst√°culo cerca
            elif i == 1:
                x_pos = random.randint(x_min + 200, x_min + 400)  # Segundo m√°s lejos
            else:
                x_pos = random.randint(x_min + 400, x_max)  # Tercero m√°s lejos a√∫n
            
            if self.agregar_obstaculo(x_pos, carril, tipo):
                obstaculos_generados += 1
                print(f"‚úÖ Generado {tipo} en carril {carril}, x={x_pos}")
        
        # ‚úÖ ACTUALIZAR PARA PR√ìXIMA GENERACI√ìN
        self.ultima_generacion_x = x_max
        print(f"üì¶ Generados {obstaculos_generados} obst√°culos")
        print(f"üìç Pr√≥xima generaci√≥n en X={self.ultima_generacion_x}")

    def guardar_partida_actual(self):
        """Guarda el estado actual en JSON"""
        try:
            archivo = self.generador_json.guardar_partida(self.arbol_obstaculos, self.carro.x)
            print(f"üíæ Partida guardada: {archivo}")
        except Exception as e:
            print(f"‚ùå Error guardando partida: {e}")

    def agregar_obstaculo(self, x, carril, tipo="normal", dano=10):
        """Agrega obst√°culo con verificaci√≥n de superposici√≥n"""
        try:
            # ‚úÖ VERIFICAR DISTANCIA M√çNIMA DEL CARRO
            if x <= self.carro.x + 150:  # M√≠nimo 150px de distancia
                x = self.carro.x + 200
                print(f"üîß Ajustando posici√≥n a X={x} por distancia m√≠nima")
            
            # ‚úÖ VERIFICAR SUPERPOSICI√ìN CON OTROS OBST√ÅCULOS
            for obstaculo_existente in self.carretera.obstaculos:
                # Evitar obst√°culos en la misma zona (¬±100px)
                if (abs(obstaculo_existente.x - x) < 150 and 
                    obstaculo_existente.carril == carril):
                    print(f"üö´ Obst√°culo muy cerca en X={obstaculo_existente.x}, carril {carril}")
                    return False  # No agregar este obst√°culo
            
            obstaculo = Obstaculo(x, carril, tipo, dano)
            self.carretera.agregar_obstaculo(obstaculo)
            self.arbol_obstaculos.insertar(x, carril, tipo, dano, obstaculo)
            print(f"‚ûï Obst√°culo agregado: {tipo} en X:{x}, Carril:{carril}")
            return True
        except Exception as e:
            print(f"‚ùå ERROR agregando obst√°culo: {e}")
            return False

    def actualizar_obstaculos_visibles(self, x_min, x_max):
        """Actualiza obst√°culos visibles"""
        try:
            self.obstaculos_visibles = self.arbol_obstaculos.obtener_en_rango(x_min, x_max, 0, 3)
        except:
            # Fallback si el √°rbol falla
            self.obstaculos_visibles = [
                obst for obst in self.carretera.obstaculos 
                if x_min <= obst.x <= x_max
            ]
        
        # Debug ocasional
        if random.random() < 0.05:
            print(f"üëÄ {len(self.obstaculos_visibles)} obst√°culos visibles")

    def verificar_colisiones(self):
        """Verifica colisiones"""
        for obst in self.obstaculos_visibles:
            if obst.colisiona_con(self.carro):
                if not getattr(obst, 'ya_colisionado', False):
                    self.energia -= obst.dano
                    obst.ya_colisionado = True
                    print(f"üí• Choque con {obst.tipo}! Energ√≠a: {max(0, self.energia)}%")
                    
                    if self.energia <= 0:
                        self.terminado = True
                        print("‚ùå Juego terminado")
                        break

    def update(self, screen_width=800):
        """Ciclo de actualizaci√≥n - SIN movimiento de obst√°culos"""
        if not self.en_ejecucion or self.terminado:
            return

        # ‚úÖ 1. SOLO EL CARRO AVANZA
        self.carro.avanzar()  # Esto aumenta self.carro.x

        # ‚úÖ 2. Generar obst√°culos din√°micos
        self.generar_obstaculos_dinamicos()

        # ‚úÖ 3. Actualizar salto del carro
        self.carro.actualizar_salto()

        # ‚ùå 4. ¬°NO MOVER OBST√ÅCULOS! Eliminar cualquier c√≥digo aqu√≠

        # ‚úÖ 5. Actualizar obst√°culos visibles
        x_min = max(0, self.carro.x - 100)
        x_max = self.carro.x + screen_width + 200
        self.actualizar_obstaculos_visibles(x_min, x_max)

        # ‚úÖ 6. Verificar colisiones
        self.verificar_colisiones()
        
        # ‚úÖ 7. Debug para confirmar movimiento correcto
        if self.carro.x % 100 == 0:
            print(f"üöó Carro AVANZA: X={self.carro.x}")
            if self.carretera.obstaculos:
                print(f"üìç Obst√°culo FIJO: X={self.carretera.obstaculos[0].x}")

    def reiniciar(self):
        """Reinicia el juego"""
        self.carro = Carro()
        self.carretera.obstaculos.clear()
        self.arbol_obstaculos = ArbolAVL()
        self.obstaculos_visibles.clear()
        self.energia = self.energia_maxima
        self.terminado = False
        self.ultima_generacion_x = 100
        # Regenerar obst√°culos iniciales
        self.generar_obstaculos_iniciales([])
        print("üîÑ Juego reiniciado")

class GameThread(threading.Thread):
    def __init__(self, juego, screen_width=800):
        super().__init__()
        self.juego = juego
        self.screen_width = screen_width

    def run(self):
        while not self.juego.terminado and self.juego.en_ejecucion:
            self.juego.update(self.screen_width)
            time.sleep(self.juego.intervalo)